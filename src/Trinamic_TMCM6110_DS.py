#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        Trinamic_TMCM6110_DS.py
#
# description : Python source for the Trinamic_TMCM6110_DS and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                Trinamic_TMCM6110_DS are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import threading
import Queue
import time
import Trinamic_control6110 as tc
import numpy as np


#==================================================================
#   Trinamic_TMCM6110_DS Class Description:
#
#         Controls a Trinamic TMCM-6110 6-axis stepper motor controller.
#         The connection is thorugh a Moxa NPort 5150 and works over serial line or ethernet.
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :      Connected to motor controller
#   DevState.OFF :     Disconnected from motor controller
#   DevState.MOVING :  Motor moving
#   DevState.FAULT :   Fault detected
#   DevState.ALARM :   Limit switch reached
#==================================================================
class TrinamicEvent:
    def __init__(self, event, data=None):
        self.event = event
        self.data = data
        
class TrinamicCommand:
    def __init__(self, command, data=None, motor=0):
        self.command = command
        self.data = data
        self.motor = motor

class Trinamic_TMCM6110_DS(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        Trinamic_TMCM6110_DS.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device", self.get_name()
        self.stopHardwareThread()
        if self.TC != None:
            if self.TC.port != None:
                if self.TC.port.isOpen():
                    self.TC.close()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.set_state(PyTango.DevState.UNKNOWN)
        self.get_device_properties(self.get_device_class())    # Loads port name
#        try:
#            self.TC = tc.Trinamic_control6110()            
#            self.set_state(PyTango.DevState.UNKNOWN)
#            self.set_status('Disconnected from motor controller')
#            self.info_stream('Trinamic control object created.')
#        except Exception, e:
#            self.error_stream('Motor controller object creation failed.')
#            self.set_state(PyTango.DevState.FAULT)
#            self.set_status('Failed to create motor controller object.')
#            PyTango.Except.throw_exception('Motor controller creation fail',
#                                        str(e), 'init_device', PyTango.ErrSeverity.ERR)
#            self.TC = None


        self.actualPositions = [0, 0, 0, 0, 0, 0]
        self.actualSpeeds = [0, 0, 0, 0, 0, 0]
        self.pulseDivisors = [1, 1, 1, 1, 1, 1]
        self.microstepResolutions = [1, 1, 1, 1, 1, 1]
        self.targetPositions = [0, 0, 0, 0, 0, 0]
        self.targetSpeeds = [0, 0, 0, 0, 0, 0]
        self.limitSwitches0 = [0, 0, 0, 0, 0, 0]
        self.limitSwitches1 = [0, 0, 0, 0, 0, 0]
        self.limitSwitchPolarity = 0
        self.limitSwitch0Enabled = [True, True, True, True, True, True]
        self.limitSwitch1Enabled = [True, True, True, True, True, True]
        self.maxCurrents = [0, 0, 0, 0, 0, 0]
        self.loadValues = [0, 0, 0, 0, 0, 0]
        self.motorStatus = ['stopped', 'stopped', 'stopped', 'stopped', 'stopped', 'stopped']
        self.motorStatusCode = [128, 128, 128, 128, 128, 128]
        
        self.accelerations = [2000, 2000, 2000, 2000, 2000, 2000]
        
        self.hardwareLock = threading.Lock()
        self.hardwareThread = threading.Thread()
#        threading.Thread.__init__(self.hardwareThread, target=self.readHardware)
        threading.Thread.__init__(self.hardwareThread, target=self.stateHandlerDispatcher)
        
        self.eventQueue = Queue.Queue(100)
        self.commandQueue = Queue.Queue(100)
        
        self.stateHandlerDict = {PyTango.DevState.ON: self.onHandler,
                                PyTango.DevState.MOVING: self.onHandler,
                                PyTango.DevState.ALARM: self.alarmHandler,
                                PyTango.DevState.FAULT: self.faultHandler,
                                PyTango.DevState.UNKNOWN: self.unknownHandler}

        self.stopHardwareThreadFlag = False
        
        self.hardwareThread.start()

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
#        print "In ", self.get_name(), "::always_excuted_hook()"
        pass



    def setupMotors(self):
        self.info_stream('Entering setupMotors...')
        attrs = self.get_device_attr()
        for i in range(6):
            self.info_stream('Setting maxCurrents...')
            mc = attrs.get_w_attr_by_name(''.join(('MaxCurrentM', str(i)))).get_write_value()
            self.maxCurrents[i] = mc            
            self.TC.setMaxCurrent(self.maxCurrents[i], i)
            self.info_stream('...done')
            
            self.info_stream('Setting limit0Enable...')
            le = attrs.get_w_attr_by_name(''.join(('Limit0EnableM', str(i)))).get_write_value()
            self.limitSwitch0Enabled[i] = le
            self.setLimitSwitchEnable(le, 0, i)
            self.info_stream('...done')
            
            self.info_stream('Setting limit1Enable...')
            le = attrs.get_w_attr_by_name(''.join(('Limit1EnableM', str(i)))).get_write_value()
            self.limitSwitch1Enabled[i] = le
            self.setLimitSwitchEnable(le, 1, i)
            self.info_stream('...done')
            
            self.info_stream('Setting microstepResolution...')
            mr = attrs.get_w_attr_by_name(''.join(('MicrostepResolutionM', str(i)))).get_write_value()
            self.microstepResolutions[i] = mr
            self.setMotorMicrostepResolution(mr, i)
            self.info_stream('...done')
            
            self.info_stream('Setting acceleration...')
            acc = attrs.get_w_attr_by_name(''.join(('AccelerationM', str(i)))).get_write_value()    
            self.accelerations[i] = acc
            self.info_stream('...done')
            
            self.info_stream('Setting speed...')
            spd = attrs.get_w_attr_by_name(''.join(('SpeedM', str(i)))).get_write_value()
            self.targetSpeeds[i] = spd
            self.setMotorSpeed(spd, i)    # Acceleration is also set in this command
            self.info_stream('...done')
        self.info_stream('Setting limitPolarity...')
        lp = attrs.get_w_attr_by_name('LimitPolarity').get_write_value()
        self.limitSwitchPolarity = lp
        self.info_stream('...done')
        self.setLimitSwitchPolarity(lp)


    def setMotorSpeed(self, speed, motor):
        # data is in full steps per second.
        # TMCL speed is in usteps / s, so scale the value
        # then find the highest pulse divisor to maximize the resolution
        # 16e6/65536 is the speed unit, 2047 speed units at max speed
        self.info_stream(''.join(('Setting speed ', str(speed), ' to motor ', str(motor))))
        if speed == None:
            speed = 0
        uspeed = speed * self.microstepResolutions[motor] # microstep speed            
        if speed == 0:
            pd = 7
        else:            
            pd = np.floor(np.log2(16e6 / 65536 * 2047 / uspeed))
        if pd > 11:
            pd = 10
        elif pd < 0:
            pd = 0
        tspeed = np.floor(uspeed / (16e6 / 65536 / 2 ** pd))
        if tspeed < 2048:
            self.targetSpeeds[motor] = speed
            self.pulseDivisors[motor] = pd
            try:
                self.hardwareLock.acquire()
                self.TC.setPulseDivisor(pd, motor)
                self.TC.setTargetSpeed(tspeed, motor)
            except Exception, e:
                self.error_stream(''.join(('Could not set speed ', str(e))))
                self.set_state(PyTango.DevState.FAULT)
                self.set_status(''.join(('Could not set speed ', str(e))))
            finally:
                self.hardwareLock.release()
            # We need to recalculate the acceleration when setting speed
            # due to dependence on pulse divisor
            self.setMotorAcceleration(self.accelerations[motor], motor)
        else:
            self.error_stream('Speed too high.')
            PyTango.Except.throw_exception('Speed too high', ''.join(('Speed too high: Div ', str(pd), ', Speed ', str(tspeed)))
                                            , 'setMotorSpeed', PyTango.ErrSeverity.WARN)


    def setMotorAcceleration(self, acceleration, motor):
        self.info_stream(''.join(('Setting acceleration ', str(acceleration), ' to motor ', str(motor))))

        if self.microstepResolutions[motor] > 0:
            ms = np.log2(self.microstepResolutions[motor])
        else:
            ms = 0
        pd = self.pulseDivisors[motor]    
        if acceleration < 0:        
            self.error_stream('Acceleration negative.')
            PyTango.Except.throw_exception('Acceleration negative.', ''.join(('Acceleration negative: Acc ', str(acceleration)))
                                            , 'setMotorAcceleration', PyTango.ErrSeverity.WARN)
        else:
            if acceleration == 0:
                rd = pd
            else:
                rd = np.floor(np.log2(6e6 ** 2 * 1023 / (2 ** ms * 2 ** pd * acceleration)) - 29)
            if rd > 13:
                rd = 13
            elif rd < 0:
                rd = 0
            acc = np.round(acceleration / (16e6 ** 2 / (2 ** (ms + pd + rd + 29))))
            try:
                self.hardwareLock.acquire()
                if acc < 2048:
                    self.accelerations[motor] = acceleration
                    self.TC.setRampDivisor(rd, motor)
                    self.TC.setAcceleration(acc, motor)
                else:
                    acc = 2047
                    self.accelerations[motor] = acc * 16e6 ** 2 / (2 ** (pd + rd + 29))
                    self.TC.setRampDivisor(rd, motor)
                    self.TC.setAcceleration(acc, motor)
            except Exception, e:
                self.error_stream(''.join(('Could not set acceleration ', str(e))))
                self.set_state(PyTango.DevState.FAULT)
                self.set_status(''.join(('Could not set acceleration ', str(e))))
            finally:
                self.hardwareLock.release()


    def setMotorMicrostepResolution(self, microstepResolution, motor):
        self.info_stream(''.join(('Setting microstep resolution ', str(microstepResolution), ' to motor ', str(motor))))
        
        if microstepResolution == 0:
            microstepResolution = 1
        if microstepResolution < 1:
            self.error_stream('Microstep resolution negative.')
            PyTango.Except.throw_exception('Microstep resolution negative.', ''.join(('Microstep resolution negative: MR ', str(microstepResolution)))
                                            , 'setMotorMicrostepResolution', PyTango.ErrSeverity.WARN)
        elif microstepResolution > 64:
            self.error_stream('Microstep resolution too high (>64).')
            PyTango.Except.throw_exception('Microstep resolution too high.', ''.join(('Microstep resolution too high (>64): MR ', str(microstepResolution)))
                                            , 'setMotorMicrostepResolution', PyTango.ErrSeverity.WARN)
        else:
            mr = int(2 ** np.floor(np.log2(microstepResolution)))
            oldMr = self.microstepResolutions[motor]
            if oldMr not in range(1, 65):
                oldMr = 1
            self.microstepResolutions[motor] = mr
            try:
                self.hardwareLock.acquire()
                pos = self.TC.getActualPosition(motor)
                self.TC.setMicrostepResolution(mr, motor)
                self.TC.definePosition(round(pos * mr / oldMr), motor)
            except Exception, e:
                self.error_stream(''.join(('Could not set microstep ', str(e))))
                self.set_state(PyTango.DevState.FAULT)
                self.set_status(''.join(('Could not set microstep ', str(e))))
            finally:
                self.hardwareLock.release()
            self.setMotorSpeed(self.targetSpeeds[motor], motor)


    def setMotorPosition(self, position, motor):
        self.info_stream(''.join(('Setting position ', str(position), ' to motor ', str(motor))))
        try:
            self.hardwareLock.acquire()
            self.targetPositions[motor] = position
            self.TC.setTargetPosition(np.round(position * self.microstepResolutions[motor]), motor)
        except Exception, e:
            self.error_stream(''.join(('Could not set position', str(e))))
            self.set_state(PyTango.DevState.FAULT)
            self.set_status(''.join(('Could not set position', str(e))))
        finally:
            self.hardwareLock.release()


#    @PyTango.DebugIt(show_args=True, show_ret=True)
    def setLimitSwitchEnable(self, enable, switch, motor):
        if enable == True:
            self.info_stream(''.join(('Enabling limitswitch ', str(switch), ' on motor ', str(motor))))
        else:
            self.info_stream(''.join(('Disabling limitswitch ', str(switch), ' on motor ', str(motor))))

        try:
            self.hardwareLock.acquire()
            if switch == 0:
                self.TC.setLeftLimitSwitchEnable(enable, motor)
                self.limitSwitch0Enabled[motor] = enable
            else:
                self.TC.setRightLimitSwitchEnable(enable, motor)
                self.limitSwitch1Enabled[motor] = enable
        except Exception, e:
            self.set_state(PyTango.DevState.FAULT)
        finally:
            self.hardwareLock.release()
#            self.debug_stream('Hardware lock released.')

#    @PyTango.DebugIt(show_args=True, show_ret=False)
    def setMaxCurrent(self, maxCurrent, motor):
        self.info_stream(''.join(('Setting max current ', str(maxCurrent), ' to motor ', str(motor))))
        if maxCurrent > 1.5:
            PyTango.Except.throw_exception('Current too high', ''.join(('Max current must be below 1.5 A, motor ', str(motor))),
                                        'setMaxCurrent', PyTango.ErrSeverity.WARN)
            maxCurrent = 1.5
        elif maxCurrent < 0:
            PyTango.Except.throw_exception('Current too low', ''.join(('Max current must be positive, motor ', str(motor))),
                                        'setMaxCurrent', PyTango.ErrSeverity.WARN)
            maxCurrent = 0.0
        self.maxCurrents[motor] = maxCurrent
        try:
            self.hardwareLock.acquire()
            self.TC.setMaxCurrent(maxCurrent, motor)
        except Exception, e:
            self.debug_stream(str(e))
            self.set_state(PyTango.DevState.FAULT)
#            PyTango.Except.throw_exception('Could not set max current', str(e), 'set max current', sever=PyTango.ErrSeverity.WARN)
        finally:
            self.hardwareLock.release()

    def stopMotors(self):
        try:
            self.hardwareLock.acquire()
            self.info_stream('Stopping all motors')    
            for i in range(6):
                self.TC.stop(i)
        except Exception, e:
            if str(e) == 'Unknown error: 47':
                self.info_stream('Motor stop error code 47')
            else:
                self.error_stream(''.join(('Motor stop error ', str(e))))
#                self.set_state(PyTango.DevState.FAULT)
                self.set_status(''.join(('Motor stop error ', str(e))))
#                PyTango.Except.throw_exception('Stopping motors fail',
#                                            str(e), 'Stop', PyTango.ErrSeverity.ERR)
        finally:
            self.hardwareLock.release()
        
    def setMotorZeroPosition(self, motor):
        self.info_stream(''.join(('Setting motor zero position to motor ', str(motor))))
        try:
            self.hardwareLock.acquire()
            self.TC.setZeroPosition(motor)
        except Exception, e:
            self.error_stream(''.join(('Could not set motor zero position ', str(e))))
            self.set_state(PyTango.DevState.FAULT)
            self.set_status(''.join(('Could not set motor zero position ', str(e))))
        finally:
            self.hardwareLock.release()

    def setLimitSwitchPolarity(self, polarity):        
        self.info_stream(''.join(('Setting limitswitch polarity ', str(polarity))))
        if polarity == 1 or polarity == True:
            self.limitSwitchPolarity = 1
        else:
            self.limitSwitchPolarity = 0
        try:
            self.hardwareLock.acquire()
#            self.TC.setLeftLimitSwitchEnable(True, motor)
#            self.TC.setRightLimitSwitchEnable(True, motor)
            self.TC.setLimitSwitchPolarity(self.limitSwitchPolarity)
        except Exception, e:
            self.error_stream(''.join(('Could not set limitswitch polarity ', str(e))))
            self.set_state(PyTango.DevState.FAULT)
            self.set_status(''.join(('Could not set limitswitch polarity ', str(e))))
            
        finally:
            self.hardwareLock.release()

    def homeMotor(self, motor):
        try:
            self.hardwareLock.acquire()
            self.TC.startReferenceSearch(motor)
        except Exception, e:
            self.error_stream(''.join(('Could not set home motor ', str(motor), ': ', str(e))))
            self.set_state(PyTango.DevState.FAULT)
            self.set_status(''.join(('Could not set home motor ', str(motor), ': ', str(e))))
        finally:
            self.hardwareLock.release()


    def startHardwareThread(self):
        self.stopHardwareThread()
        self.hardwareThread = threading.Thread()
        threading.Thread.__init__(self.hardwareThread, target=self.readHardware)
        self.hardwareThread.start()
        self.info_stream('readHardware thread started.')


    def stopHardwareThread(self):
        print 'Stopping thread...'
        self.set_state(PyTango.DevState.OFF)
        self.stopHardwareThreadFlag = True
        if self.hardwareThread.isAlive() == True:
            print 'It was alive.'
            self.hardwareThread.join(3)
        print 'Now stopped.'
        self.stopHardwareThreadFlag = False
                
    def checkCommands(self):
            try:
                cmd = self.commandQueue.get(block=False)
                if cmd.command == 'writePosition':
                    self.setMotorPosition(cmd.data, cmd.motor)
                elif cmd.command == 'writeSpeed':
                    self.setMotorSpeed(cmd.data, cmd.motor)
                elif cmd.command == 'writeAcceleration':
                    self.setMotorAcceleration(cmd.data, cmd.motor)
                elif cmd.command == 'writeMaxCurrent':
                    self.setMaxCurrent(cmd.data, cmd.motor)
                elif cmd.command == 'writeMicrostepResolution':
                    self.setMotorMicrostepResolution(cmd.data, cmd.motor)
                elif cmd.command == 'writeLimitSwitchEnable':
                    self.setLimitSwitchEnable(cmd.data[0], cmd.data[1], cmd.motor)
                elif cmd.command == 'writeLimitSwitchPolarity':
                    self.setLimitSwitchPolarity(cmd.data, cmd.motor)
                elif cmd.command == 'stop':
                    self.stopMotors()
                elif cmd.command == 'setMotorZeroPosition':
                    self.setMotorZeroPosition(cmd.motor)
                elif cmd.command == 'homeMotor':
                    self.homeMotor(cmd.motor)

            except Queue.Empty:
                pass
            
    def stateHandlerDispatcher(self):
        prevState = self.get_state()
        while self.stopHardwareThreadFlag == False:
            try:
                state = self.get_state()
                self.stateHandlerDict[state](prevState)
                prevState = state
            except KeyError:
                self.stateHandlerDict[PyTango.DevState.UNKNOWN](prevState)
                prevState = state

    def onHandler(self, prevState):
        sleepTime = self.HardwarePollingPeriod / 1000.0
        handledStates = [PyTango.DevState.ON, PyTango.DevState.MOVING]
        self.info_stream('Entering onHandler.')
        
        while self.stopHardwareThreadFlag == False:
            t0 = time.time()
            # Check if we should break this loop and go to a new state handler:
            if self.get_state() not in handledStates:
                break

            # Check if any new commands arrived:
            self.checkCommands()
            
            # Check if we should break this loop and go to a new state handler:
            if self.get_state() not in handledStates:
                break
            
            # Read hardware
            moving = False
            for i in range(6):
                try:
                    self.hardwareLock.acquire()
                    self.actualPositions[i] = np.double(self.TC.getActualPosition(i)) / self.microstepResolutions[i]
                    speed = self.TC.getActualSpeed(i)
                    self.actualSpeeds[i] = speed * 16e6 / 65536 / 2 ** self.pulseDivisors[i] / self.microstepResolutions[i]
                    self.limitSwitches0[i] = self.TC.getLeftLimitSwitch(i)
                    self.limitSwitches1[i] = self.TC.getRightLimitSwitch(i)
                    
                    # We want increasing number with increasing load, so the number is inverted
                    self.loadValues[i] = self.TC.getActualMotorLoad(i)
                    
                    # Process motor driver status flags
                    status = self.TC.getDriverErrorFlags(i)
                    self.motorStatusCode[i] = status
                    s = ''
                    if status & 128 > 0:
                        s = ''.join((s, 'Stand still\n'))
                    else:
                        s = ''.join((s, 'Moving\n'))
                        moving = True
                    if status & 64 > 0:
                        s = ''.join((s, 'Open circuit B (no motor)\n'))
                    if status & 32 > 0:
                        s = ''.join((s, 'Open circuit A (no motor)\n'))
                    if status & 16 > 0:
                        s = ''.join((s, 'Short circuit B\n'))
                    if status & 8 > 0:
                        s = ''.join((s, 'Short circuit A\n'))
                    if status & 4 > 0:
                        s = ''.join((s, 'Pre-warning overtemperature\n'))
                    if status & 2 > 0:
                        s = ''.join((s, 'Overtemperature\n'))
                    if status & 1 > 0:
                        s = ''.join((s, 'Load threshold exeeded\n'))
                        
                    self.motorStatus[i] = s
#                    if self.TC.getTargetPositionReached(i) == False:
#                        moving = True
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    self.error_stream('Error reading hardware')
    #                PyTango.Except.throw_exception('Error reading hardware', str(e), 'readHardware thread')
                finally:
                    self.hardwareLock.release()

            if moving == True:
                self.set_state(PyTango.DevState.MOVING)
                self.set_status('Motor(s) moving')
            else:
                self.set_state(PyTango.DevState.ON)
                self.set_status('Connected to motor controller')
            
            
            
            time.sleep(max(0, sleepTime - (time.time() - t0)))
        

    def offHandler(self, prevState):
        pass

    def faultHandler(self, prevState):
        responseAttempts = 0
        maxAttempts = 5
        responseTimeout = 0.5
        self.info_stream('Entering faultHandler.')
        
        while self.get_state() == PyTango.DevState.FAULT:
            try:
                self.hardwareLock.acquire()
                self.info_stream(''.join(('Trying to reconnect... #', str(responseAttempts))))
                self.TC.reconnect()
                self.set_state(PyTango.DevState.ON)
                self.set_status('On')
                self.info_stream('Fault condition cleared.')
                break
            except Exception, e:
                self.error_stream(''.join(('In faultHandler: Testing controller response. Returned ', str(e))))
                responseAttempts += 1
            finally:
                self.hardwareLock.release()
            if responseAttempts >= maxAttempts:
                self.set_state(PyTango.DevState.UNKNOWN)
                self.set_status('Could not connect to controller')
                self.error_stream('Giving up fault handling. Going to UNKNOWN state.')
                break
            time.sleep(responseTimeout)

    def unknownHandler(self, prevState):
        self.info_stream('Entering unknownHandler')
        connectionTimeout = 1.0
        while self.get_state() == PyTango.DevState.UNKNOWN:
            self.info_stream('Trying to connect...')
            try:
                self.TC.close()
            except Exception, e:
                pass
            finally:
                self.TC = tc.Trinamic_control6110() 

            # We assume that the correct baudrate is already set so try that first
            try:
                self.info_stream('Connecting at 38400...')
                self.TC.connectRS485(self.Port, 38400)
            except Exception, e:
                self.error_stream('Could not connect')
                self.set_status('Failed to connect.')
#                PyTango.Except.throw_exception('Motor controller connection fail',
#                                            str(e), 'unknownHandler', PyTango.ErrSeverity.ERR)
#                    raise
            else:
                try:
                    br = self.TC.getBaudrate()
                    self.info_stream(''.join(('Baudrate: ', str(br))))
                except Exception, e:
                    # Next try 9600 baud, this is the factory default
                    self.TC.close()
                    self.info_stream('Connecting at 9600...')
                    try:
                        self.TC.connectRS485(self.Port, 9600)
                        br = self.TC.getBaudrate()
                        self.info_stream(''.join(('Baudrate: ', str(br))))
                    except Exception, e:
                        # If that also fails we have to do a factory reset.
                        self.error_stream('Could not connect at 9600.')
                        self.set_status('Failed to connect to motor controller. Factory reset needed.')
#                        PyTango.Except.throw_exception('Failed to connect to motor controller. Factory reset needed.',
#                                                    str(e), 'unknownHandler', PyTango.ErrSeverity.ERR)
                    else:
                        # If that works, we try to set to 38400
                        try:
                            self.info_stream('Set new baudrate to 38400')
                            self.TC.setBaudrate(38400)
                            br = self.TC.getBaudrate()
                            self.info_stream(''.join(('Baudrate: ', str(br))))
                        except Exception, e:
                            # If that also fails we have to do a factory reset.
                            self.error_stream('In unknownHandler: Could not set new baudrate 38400. Factory reset needed.')
                            self.set_status('Failed to set 38400 baudrate. Factory reset needed.')
#                            PyTango.Except.throw_exception('Failed to 38400 baudrate. Factory reset needed.',
#                                                        str(e), 'unknownHandler', PyTango.ErrSeverity.ERR)
                        
                try:            
                    self.setupMotors()
#                    self.startHardwareThread()
                    self.set_state(PyTango.DevState.ON)
                    self.set_status('Connected to motor controller')
                    break
                except Exception, e:
                    self.error_stream('Could not communicate with motor controller')
                    self.set_status('Failed to communicate with motor controller.')
#                    PyTango.Except.throw_exception('Motor controller connection fail',
#                                                str(e), 'unknownHandler', PyTango.ErrSeverity.ERR)
            time.sleep(connectionTimeout)
    

    def alarmHandler(self, prevState):
        self.info_stream('Entering alarmHandler:')
        self.set_state(PyTango.DevState.ON)
    

    def readHardware(self):
        sleepTime = self.HardwarePollingPeriod / 1000.0 / 5 / 6
        print 'Sleeptime:', sleepTime
        while not self.stopHardwareThreadFlag:
            if self.get_state() != PyTango.DevState.FAULT:
                try:
                    moving = False
                    for i in range(6):
                        self.hardwareLock.acquire()
                        self.actualPositions[i] = np.double(self.TC.getActualPosition(i)) / self.microstepResolutions[i]
                        self.hardwareLock.release()
                        time.sleep(sleepTime)
        
                        self.hardwareLock.acquire()
                        speed = self.TC.getActualSpeed(i)
                        self.hardwareLock.release()                    
                        self.actualSpeeds[i] = speed * 16e6 / 65536 / 2 ** self.pulseDivisors[i] / self.microstepResolutions[i]
                        time.sleep(sleepTime)
                        
                        self.hardwareLock.acquire()
                        self.limitSwitches0[i] = self.TC.getLeftLimitSwitch(i)
                        self.hardwareLock.release()
                        time.sleep(sleepTime)
                        
                        self.hardwareLock.acquire()
                        self.limitSwitches1[i] = self.TC.getRightLimitSwitch(i)
                        self.hardwareLock.release()
                        time.sleep(sleepTime)
        
                        self.hardwareLock.acquire()
                        if self.TC.getTargetPositionReached(i) == False:
                            moving = True
                        self.hardwareLock.release()
                        time.sleep(sleepTime)
    
                    if moving == True:
                        self.set_state(PyTango.DevState.MOVING)
                        self.set_status('Motor(s) moving')
                    else:
                        self.set_state(PyTango.DevState.ON)
                        self.set_status('Connected to motor controller')
                except Exception, e:
                    self.set_state(PyTango.DevState.FAULT)
                    self.set_status('Error reading hardware.')
                    PyTango.Except.throw_exception('Error reading hardware', str(e), 'readHardware thread')
            else:
                time.sleep(sleepTime * 5)


#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, data):
#        print "In ", self.get_name(), "::read_attr_hardware()"
        pass




#==================================================================
#
#    Trinamic_TMCM6110_DS read/write attribute methods
#
#==================================================================

#------------------------------------------------------------------
#    Read PositionM0 attribute
#------------------------------------------------------------------
    def read_PositionM0(self, attr):
    
        #    Add your own code here
        attr_ActualPosition_read = self.actualPositions[0]
        attr.set_value(attr_ActualPosition_read)


#------------------------------------------------------------------
#    Write PositionM0 attribute
#------------------------------------------------------------------
    def write_PositionM0(self, attr):
        data = attr.get_write_value()

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writePosition', data, 0))


#---- PositionM0 attribute State Machine -----------------
    def is_PositionM0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read PositionM1 attribute
#------------------------------------------------------------------
    def read_PositionM1(self, attr):
        #    Add your own code here
        
        attr_PositionM1_read = self.actualPositions[1]
        attr.set_value(attr_PositionM1_read)


#------------------------------------------------------------------
#    Write PositionM1 attribute
#------------------------------------------------------------------
    def write_PositionM1(self, attr):
        data = attr.get_write_value()
        
        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writePosition', data, 1))


#---- PositionM1 attribute State Machine -----------------
    def is_PositionM1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read PositionM2 attribute
#------------------------------------------------------------------
    def read_PositionM2(self, attr):
        #    Add your own code here
        
        attr_PositionM2_read = self.actualPositions[2]
        attr.set_value(attr_PositionM2_read)


#------------------------------------------------------------------
#    Write PositionM2 attribute
#------------------------------------------------------------------
    def write_PositionM2(self, attr):
        print "In ", self.get_name(), "::write_PositionM2()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writePosition', data, 2))


#---- PositionM2 attribute State Machine -----------------
    def is_PositionM2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read PositionM3 attribute
#------------------------------------------------------------------
    def read_PositionM3(self, attr):
        #    Add your own code here
        
        attr_PositionM3_read = self.actualPositions[3]
        attr.set_value(attr_PositionM3_read)


#------------------------------------------------------------------
#    Write PositionM3 attribute
#------------------------------------------------------------------
    def write_PositionM3(self, attr):
        print "In ", self.get_name(), "::write_PositionM3()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writePosition', data, 3))


#---- PositionM3 attribute State Machine -----------------
    def is_PositionM3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read PositionM4 attribute
#------------------------------------------------------------------
    def read_PositionM4(self, attr):
        #    Add your own code here
        
        attr_PositionM4_read = self.actualPositions[4]
        attr.set_value(attr_PositionM4_read)


#------------------------------------------------------------------
#    Write PositionM4 attribute
#------------------------------------------------------------------
    def write_PositionM4(self, attr):
        print "In ", self.get_name(), "::write_PositionM4()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writePosition', data, 4))


#---- PositionM4 attribute State Machine -----------------
    def is_PositionM4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read PositionM5 attribute
#------------------------------------------------------------------
    def read_PositionM5(self, attr):
        #    Add your own code here
        
        attr_PositionM5_read = self.actualPositions[5]
        attr.set_value(attr_PositionM5_read)


#------------------------------------------------------------------
#    Write PositionM5 attribute
#------------------------------------------------------------------
    def write_PositionM5(self, attr):
        print "In ", self.get_name(), "::write_PositionM5()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writePosition', data, 5))


#---- PositionM5 attribute State Machine -----------------
    def is_PositionM5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read SpeedM0 attribute
#------------------------------------------------------------------
    def read_SpeedM0(self, attr):
        #    Add your own code here
        
        attr_SpeedM0_read = self.actualSpeeds[0]
        attr.set_value(attr_SpeedM0_read)


#------------------------------------------------------------------
#    Write SpeedM0 attribute
#------------------------------------------------------------------
    def write_SpeedM0(self, attr):
        print "In ", self.get_name(), "::write_SpeedM0()"
        data = attr.get_write_value()
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeSpeed', data, 0))


#---- SpeedM0 attribute State Machine -----------------
    def is_SpeedM0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read SpeedM1 attribute
#------------------------------------------------------------------
    def read_SpeedM1(self, attr):
        #    Add your own code here
        
        attr_SpeedM1_read = self.actualSpeeds[1]
        attr.set_value(attr_SpeedM1_read)


#------------------------------------------------------------------
#    Write SpeedM1 attribute
#------------------------------------------------------------------
    def write_SpeedM1(self, attr):
        print "In ", self.get_name(), "::write_SpeedM1()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeSpeed', data, 1))


#---- SpeedM1 attribute State Machine -----------------
    def is_SpeedM1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read SpeedM2 attribute
#------------------------------------------------------------------
    def read_SpeedM2(self, attr):
        #    Add your own code here
        
        attr_SpeedM2_read = self.actualSpeeds[2]
        attr.set_value(attr_SpeedM2_read)


#------------------------------------------------------------------
#    Write SpeedM2 attribute
#------------------------------------------------------------------
    def write_SpeedM2(self, attr):
        print "In ", self.get_name(), "::write_SpeedM2()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeSpeed', data, 2))


#---- SpeedM2 attribute State Machine -----------------
    def is_SpeedM2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read SpeedM3 attribute
#------------------------------------------------------------------
    def read_SpeedM3(self, attr):
        #    Add your own code here
        
        attr_SpeedM3_read = self.actualSpeeds[3]
        attr.set_value(attr_SpeedM3_read)


#------------------------------------------------------------------
#    Write SpeedM3 attribute
#------------------------------------------------------------------
    def write_SpeedM3(self, attr):
        print "In ", self.get_name(), "::write_SpeedM3()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeSpeed', data, 3))



#---- SpeedM3 attribute State Machine -----------------
    def is_SpeedM3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read SpeedM4 attribute
#------------------------------------------------------------------
    def read_SpeedM4(self, attr):
        #    Add your own code here
        
        attr_SpeedM4_read = self.actualSpeeds[4]
        attr.set_value(attr_SpeedM4_read)


#------------------------------------------------------------------
#    Write SpeedM4 attribute
#------------------------------------------------------------------
    def write_SpeedM4(self, attr):
        print "In ", self.get_name(), "::write_SpeedM4()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeSpeed', data, 4))


#---- SpeedM4 attribute State Machine -----------------
    def is_SpeedM4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read SpeedM5 attribute
#------------------------------------------------------------------
    def read_SpeedM5(self, attr):
        #    Add your own code here
        
        attr_SpeedM5_read = self.actualSpeeds[5]
        attr.set_value(attr_SpeedM5_read)


#------------------------------------------------------------------
#    Write SpeedM5 attribute
#------------------------------------------------------------------
    def write_SpeedM5(self, attr):
        print "In ", self.get_name(), "::write_SpeedM5()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeSpeed', data, 5))


#---- SpeedM5 attribute State Machine -----------------
    def is_SpeedM5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0M0 attribute
#------------------------------------------------------------------
    def read_Limit0M0(self, attr):
        #    Add your own code here
#        self.debug_stream(str(self.limitSwitches0))
        attr_Limit0M0_read = self.limitSwitches0[0]
        attr.set_value(attr_Limit0M0_read)


#---- Limit0M0 attribute State Machine -----------------
    def is_Limit0M0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1M0 attribute
#------------------------------------------------------------------
    def read_Limit1M0(self, attr):
        #    Add your own code here
        
        attr_Limit1M0_read = self.limitSwitches1[0]
        attr.set_value(attr_Limit1M0_read)


#---- Limit1M0 attribute State Machine -----------------
    def is_Limit1M0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0M1 attribute
#------------------------------------------------------------------
    def read_Limit0M1(self, attr):
        #    Add your own code here
        
        attr_Limit0M1_read = self.limitSwitches0[1]
        attr.set_value(attr_Limit0M1_read)


#---- Limit0M1 attribute State Machine -----------------
    def is_Limit0M1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1M1 attribute
#------------------------------------------------------------------
    def read_Limit1M1(self, attr):
        #    Add your own code here
        
        attr_Limit1M1_read = self.limitSwitches1[1]
        attr.set_value(attr_Limit1M1_read)


#---- Limit1M1 attribute State Machine -----------------
    def is_Limit1M1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0M2 attribute
#------------------------------------------------------------------
    def read_Limit0M2(self, attr):
        #    Add your own code here
        
        attr_Limit0M2_read = self.limitSwitches0[2]
        attr.set_value(attr_Limit0M2_read)


#---- Limit0M2 attribute State Machine -----------------
    def is_Limit0M2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1M2 attribute
#------------------------------------------------------------------
    def read_Limit1M2(self, attr):
        #    Add your own code here
        
        attr_Limit1M2_read = self.limitSwitches1[2]
        attr.set_value(attr_Limit1M2_read)


#---- Limit1M2 attribute State Machine -----------------
    def is_Limit1M2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0M3 attribute
#------------------------------------------------------------------
    def read_Limit0M3(self, attr):
        #    Add your own code here
        
        attr_Limit0M3_read = self.limitSwitches0[3]
        attr.set_value(attr_Limit0M3_read)


#---- Limit0M3 attribute State Machine -----------------
    def is_Limit0M3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1M3 attribute
#------------------------------------------------------------------
    def read_Limit1M3(self, attr):
        #    Add your own code here
        
        attr_Limit1M3_read = self.limitSwitches1[3]
        attr.set_value(attr_Limit1M3_read)


#---- Limit1M3 attribute State Machine -----------------
    def is_Limit1M3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0M4 attribute
#------------------------------------------------------------------
    def read_Limit0M4(self, attr):
        #    Add your own code here
        
        attr_Limit0M4_read = self.limitSwitches0[4]
        attr.set_value(attr_Limit0M4_read)


#---- Limit0M4 attribute State Machine -----------------
    def is_Limit0M4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1M4 attribute
#------------------------------------------------------------------
    def read_Limit1M4(self, attr):
        #    Add your own code here
        
        attr_Limit1M4_read = self.limitSwitches1[4]
        attr.set_value(attr_Limit1M4_read)


#---- Limit1M4 attribute State Machine -----------------
    def is_Limit1M4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0M5 attribute
#------------------------------------------------------------------
    def read_Limit0M5(self, attr):
        #    Add your own code here
        
        attr_Limit0M5_read = self.limitSwitches0[5]
        attr.set_value(attr_Limit0M5_read)


#---- Limit0M5 attribute State Machine -----------------
    def is_Limit0M5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1M5 attribute
#------------------------------------------------------------------
    def read_Limit1M5(self, attr):
        #    Add your own code here
        
        attr_Limit1M5_read = self.limitSwitches1[5]
        attr.set_value(attr_Limit1M5_read)


#---- Limit1M5 attribute State Machine -----------------
    def is_Limit1M5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MaxCurrentM0 attribute
#------------------------------------------------------------------
    def read_MaxCurrentM0(self, attr):
        #    Add your own code here
        
        attr_MaxCurrentM0_read = self.maxCurrents[0]
        attr.set_value(attr_MaxCurrentM0_read)


#------------------------------------------------------------------
#    Write MaxCurrentM0 attribute
#------------------------------------------------------------------
    def write_MaxCurrentM0(self, attr):
        print "In ", self.get_name(), "::write_MaxCurrentM0()"
        data = attr.get_write_value()
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMaxCurrent', data, 0))


#---- MaxCurrentM0 attribute State Machine -----------------
    def is_MaxCurrentM0_allowed(self, req_type):
        return True


#------------------------------------------------------------------
#    Read MaxCurrentM1 attribute
#------------------------------------------------------------------
    def read_MaxCurrentM1(self, attr):
        #    Add your own code here
        
        attr_MaxCurrentM1_read = self.maxCurrents[1]
        attr.set_value(attr_MaxCurrentM1_read)


#------------------------------------------------------------------
#    Write MaxCurrentM1 attribute
#------------------------------------------------------------------
    def write_MaxCurrentM1(self, attr):
        print "In ", self.get_name(), "::write_MaxCurrentM1()"
        data = attr.get_write_value()
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMaxCurrent', data, 1))


#---- MaxCurrentM1 attribute State Machine -----------------
    def is_MaxCurrentM1_allowed(self, req_type):
        return True


#------------------------------------------------------------------
#    Read MaxCurrentM2 attribute
#------------------------------------------------------------------
    def read_MaxCurrentM2(self, attr):
        #    Add your own code here
        
        attr_MaxCurrentM2_read = self.maxCurrents[2]
        attr.set_value(attr_MaxCurrentM2_read)


#------------------------------------------------------------------
#    Write MaxCurrentM2 attribute
#------------------------------------------------------------------
    def write_MaxCurrentM2(self, attr):
        print "In ", self.get_name(), "::write_MaxCurrentM2()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMaxCurrent', data, 2))


#---- MaxCurrentM2 attribute State Machine -----------------
    def is_MaxCurrentM2_allowed(self, req_type):
        return True


#------------------------------------------------------------------
#    Read MaxCurrentM3 attribute
#------------------------------------------------------------------
    def read_MaxCurrentM3(self, attr):
        #    Add your own code here
        
        attr_MaxCurrentM3_read = self.maxCurrents[3]
        attr.set_value(attr_MaxCurrentM3_read)


#------------------------------------------------------------------
#    Write MaxCurrentM3 attribute
#------------------------------------------------------------------
    def write_MaxCurrentM3(self, attr):
        print "In ", self.get_name(), "::write_MaxCurrentM3()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMaxCurrent', data, 3))


#---- MaxCurrentM3 attribute State Machine -----------------
    def is_MaxCurrentM3_allowed(self, req_type):
        return True


#------------------------------------------------------------------
#    Read MaxCurrentM4 attribute
#------------------------------------------------------------------
    def read_MaxCurrentM4(self, attr):
        #    Add your own code here
        
        attr_MaxCurrentM4_read = self.maxCurrents[4]
        attr.set_value(attr_MaxCurrentM4_read)


#------------------------------------------------------------------
#    Write MaxCurrentM4 attribute
#------------------------------------------------------------------
    def write_MaxCurrentM4(self, attr):
        print "In ", self.get_name(), "::write_MaxCurrentM4()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMaxCurrent', data, 4))


#---- MaxCurrentM4 attribute State Machine -----------------
    def is_MaxCurrentM4_allowed(self, req_type):
        return True


#------------------------------------------------------------------
#    Read MaxCurrentM5 attribute
#------------------------------------------------------------------
    def read_MaxCurrentM5(self, attr):
        #    Add your own code here
        
        attr_MaxCurrentM5_read = self.maxCurrents[5]
        attr.set_value(attr_MaxCurrentM5_read)


#------------------------------------------------------------------
#    Write MaxCurrentM5 attribute
#------------------------------------------------------------------
    def write_MaxCurrentM5(self, attr):
        print "In ", self.get_name(), "::write_MaxCurrentM5()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMaxCurrent', data, 5))


#---- MaxCurrentM5 attribute State Machine -----------------
    def is_MaxCurrentM5_allowed(self, req_type):
        return True


#------------------------------------------------------------------
#    Read AccelerationM0 attribute
#------------------------------------------------------------------
    def read_AccelerationM0(self, attr):
        #    Add your own code here
        
        attr_AccelerationM0_read = self.accelerations[0]
        attr.set_value(attr_AccelerationM0_read)


#------------------------------------------------------------------
#    Write AccelerationM0 attribute
#------------------------------------------------------------------
    def write_AccelerationM0(self, attr):
        print "In ", self.get_name(), "::write_AccelerationM0()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeAcceleration', data, 0))


#---- AccelerationM0 attribute State Machine -----------------
    def is_AccelerationM0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read AccelerationM1 attribute
#------------------------------------------------------------------
    def read_AccelerationM1(self, attr):
        #    Add your own code here
        
        attr_AccelerationM1_read = self.accelerations[1]
        attr.set_value(attr_AccelerationM1_read)


#------------------------------------------------------------------
#    Write AccelerationM1 attribute
#------------------------------------------------------------------
    def write_AccelerationM1(self, attr):
        print "In ", self.get_name(), "::write_AccelerationM1()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeAcceleration', data, 1))


#---- AccelerationM1 attribute State Machine -----------------
    def is_AccelerationM1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read AccelerationM2 attribute
#------------------------------------------------------------------
    def read_AccelerationM2(self, attr):
        #    Add your own code here
        
        attr_AccelerationM2_read = self.accelerations[2]
        attr.set_value(attr_AccelerationM2_read)


#------------------------------------------------------------------
#    Write AccelerationM2 attribute
#------------------------------------------------------------------
    def write_AccelerationM2(self, attr):
        print "In ", self.get_name(), "::write_AccelerationM2()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeAcceleration', data, 2))


#---- AccelerationM2 attribute State Machine -----------------
    def is_AccelerationM2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read AccelerationM3 attribute
#------------------------------------------------------------------
    def read_AccelerationM3(self, attr):
        #    Add your own code here
        
        attr_AccelerationM3_read = self.accelerations[3]
        attr.set_value(attr_AccelerationM3_read)


#------------------------------------------------------------------
#    Write AccelerationM3 attribute
#------------------------------------------------------------------
    def write_AccelerationM3(self, attr):
        print "In ", self.get_name(), "::write_AccelerationM3()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeAcceleration', data, 3))


#---- AccelerationM3 attribute State Machine -----------------
    def is_AccelerationM3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read AccelerationM4 attribute
#------------------------------------------------------------------
    def read_AccelerationM4(self, attr):
        #    Add your own code here
        
        attr_AccelerationM4_read = self.accelerations[4]
        attr.set_value(attr_AccelerationM4_read)


#------------------------------------------------------------------
#    Write AccelerationM4 attribute
#------------------------------------------------------------------
    def write_AccelerationM4(self, attr):
        print "In ", self.get_name(), "::write_AccelerationM4()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeAcceleration', data, 4))


#---- AccelerationM4 attribute State Machine -----------------
    def is_AccelerationM4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read AccelerationM5 attribute
#------------------------------------------------------------------
    def read_AccelerationM5(self, attr):
        #    Add your own code here
        
        attr_AccelerationM5_read = self.accelerations[5]
        attr.set_value(attr_AccelerationM5_read)


#------------------------------------------------------------------
#    Write AccelerationM5 attribute
#------------------------------------------------------------------
    def write_AccelerationM5(self, attr):
        print "In ", self.get_name(), "::write_AccelerationM5()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeAcceleration', data, 5))


#---- AccelerationM5 attribute State Machine -----------------
    def is_AccelerationM5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MicrostepResolutionM0 attribute
#------------------------------------------------------------------
    def read_MicrostepResolutionM0(self, attr):
        #    Add your own code here
        
        attr_MicrostepResolutionM0_read = self.microstepResolutions[0]
        attr.set_value(attr_MicrostepResolutionM0_read)


#------------------------------------------------------------------
#    Write MicrostepResolutionM0 attribute
#------------------------------------------------------------------
    def write_MicrostepResolutionM0(self, attr):
        print "In ", self.get_name(), "::write_MicrostepResolutionM0()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMicrostepResolution', data, 0))


#---- MicrostepResolutionM0 attribute State Machine -----------------
    def is_MicrostepResolutionM0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MicrostepResolutionM1 attribute
#------------------------------------------------------------------
    def read_MicrostepResolutionM1(self, attr):
        #    Add your own code here
        
        attr_MicrostepResolutionM1_read = self.microstepResolutions[1]
        attr.set_value(attr_MicrostepResolutionM1_read)


#------------------------------------------------------------------
#    Write MicrostepResolutionM1 attribute
#------------------------------------------------------------------
    def write_MicrostepResolutionM1(self, attr):
        print "In ", self.get_name(), "::write_MicrostepResolutionM1()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMicrostepResolution', data, 1))


#---- MicrostepResolutionM1 attribute State Machine -----------------
    def is_MicrostepResolutionM1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MicrostepResolutionM2 attribute
#------------------------------------------------------------------
    def read_MicrostepResolutionM2(self, attr):
        #    Add your own code here
        
        attr_MicrostepResolutionM2_read = self.microstepResolutions[2]
        attr.set_value(attr_MicrostepResolutionM2_read)


#------------------------------------------------------------------
#    Write MicrostepResolutionM2 attribute
#------------------------------------------------------------------
    def write_MicrostepResolutionM2(self, attr):
        print "In ", self.get_name(), "::write_MicrostepResolutionM2()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMicrostepResolution', data, 2))


#---- MicrostepResolutionM2 attribute State Machine -----------------
    def is_MicrostepResolutionM2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MicrostepResolutionM3 attribute
#------------------------------------------------------------------
    def read_MicrostepResolutionM3(self, attr):
        #    Add your own code here
        
        attr_MicrostepResolutionM3_read = self.microstepResolutions[3]
        attr.set_value(attr_MicrostepResolutionM3_read)


#------------------------------------------------------------------
#    Write MicrostepResolutionM3 attribute
#------------------------------------------------------------------
    def write_MicrostepResolutionM3(self, attr):
        print "In ", self.get_name(), "::write_MicrostepResolutionM3()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMicrostepResolution', data, 3))


#---- MicrostepResolutionM3 attribute State Machine -----------------
    def is_MicrostepResolutionM3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MicrostepResolutionM4 attribute
#------------------------------------------------------------------
    def read_MicrostepResolutionM4(self, attr):
        #    Add your own code here
        
        attr_MicrostepResolutionM4_read = self.microstepResolutions[4]
        attr.set_value(attr_MicrostepResolutionM4_read)


#------------------------------------------------------------------
#    Write MicrostepResolutionM4 attribute
#------------------------------------------------------------------
    def write_MicrostepResolutionM4(self, attr):
        print "In ", self.get_name(), "::write_MicrostepResolutionM4()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMicrostepResolution', data, 4))


#---- MicrostepResolutionM4 attribute State Machine -----------------
    def is_MicrostepResolutionM4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MicrostepResolutionM5 attribute
#------------------------------------------------------------------
    def read_MicrostepResolutionM5(self, attr):
        #    Add your own code here
        
        attr_MicrostepResolutionM5_read = self.microstepResolutions[5]
        attr.set_value(attr_MicrostepResolutionM5_read)


#------------------------------------------------------------------
#    Write MicrostepResolutionM5 attribute
#------------------------------------------------------------------
    def write_MicrostepResolutionM5(self, attr):
        print "In ", self.get_name(), "::write_MicrostepResolutionM5()"
        data = attr.get_write_value()
        
        print "Attribute value = ", data

        #    Add your own code here
        self.commandQueue.put(TrinamicCommand('writeMicrostepResolution', data, 5))


#---- MicrostepResolutionM5 attribute State Machine -----------------
    def is_MicrostepResolutionM5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read LimitPolarity attribute
#------------------------------------------------------------------
    def read_LimitPolarity(self, attr):
        #    Add your own code here
        
        attr_LimitPolarity_read = self.limitSwitchPolarity
        attr.set_value(attr_LimitPolarity_read)


#------------------------------------------------------------------
#    Write LimitPolarity attribute
#------------------------------------------------------------------
    def write_LimitPolarity(self, attr):
        print "In ", self.get_name(), "::write_LimitPolarity()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchPolarity(data)


#---- LimitPolarityM0 attribute State Machine -----------------
    def is_LimitPolarity_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True



#------------------------------------------------------------------
#    Read Limit0EnableM0 attribute
#------------------------------------------------------------------
    def read_Limit0EnableM0(self, attr):
        #    Add your own code here
        
        attr_Limit0EnableM0_read = self.limitSwitch0Enabled[0]
        attr.set_value(attr_Limit0EnableM0_read)


#------------------------------------------------------------------
#    Write Limit0EnableM0 attribute
#------------------------------------------------------------------
    def write_Limit0EnableM0(self, attr):
        print "In ", self.get_name(), "::write_Limit0EnableM0()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 0, 0)


#---- Limit0EnableM0 attribute State Machine -----------------
    def is_Limit0EnableM0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0EnableM1 attribute
#------------------------------------------------------------------
    def read_Limit0EnableM1(self, attr):
        #    Add your own code here
        
        attr_Limit0EnableM1_read = self.limitSwitch0Enabled[1]
        attr.set_value(attr_Limit0EnableM1_read)


#------------------------------------------------------------------
#    Write Limit0EnableM1 attribute
#------------------------------------------------------------------
    def write_Limit0EnableM1(self, attr):
        print "In ", self.get_name(), "::write_Limit0EnableM1()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 0, 1)


#---- Limit0EnableM1 attribute State Machine -----------------
    def is_Limit0EnableM1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0EnableM2 attribute
#------------------------------------------------------------------
    def read_Limit0EnableM2(self, attr):
        #    Add your own code here
        
        attr_Limit0EnableM2_read = self.limitSwitch0Enabled[2]
        attr.set_value(attr_Limit0EnableM2_read)


#------------------------------------------------------------------
#    Write Limit0EnableM2 attribute
#------------------------------------------------------------------
    def write_Limit0EnableM2(self, attr):
        print "In ", self.get_name(), "::write_Limit0EnableM2()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 0, 2)


#---- Limit0EnableM2 attribute State Machine -----------------
    def is_Limit0EnableM2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0EnableM3 attribute
#------------------------------------------------------------------
    def read_Limit0EnableM3(self, attr):
        #    Add your own code here
        
        attr_Limit0EnableM3_read = self.limitSwitch0Enabled[3]
        attr.set_value(attr_Limit0EnableM3_read)


#------------------------------------------------------------------
#    Write Limit0EnableM3 attribute
#------------------------------------------------------------------
    def write_Limit0EnableM3(self, attr):
        print "In ", self.get_name(), "::write_Limit0EnableM3()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 0, 3)


#---- Limit0EnableM3 attribute State Machine -----------------
    def is_Limit0EnableM3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0EnableM4 attribute
#------------------------------------------------------------------
    def read_Limit0EnableM4(self, attr):
        #    Add your own code here
        
        attr_Limit0EnableM4_read = self.limitSwitch0Enabled[4]
        attr.set_value(attr_Limit0EnableM4_read)


#------------------------------------------------------------------
#    Write Limit0EnableM4 attribute
#------------------------------------------------------------------
    def write_Limit0EnableM4(self, attr):
        print "In ", self.get_name(), "::write_Limit0EnableM4()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 0, 4)


#---- Limit0EnableM4 attribute State Machine -----------------
    def is_Limit0EnableM4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit0EnableM5 attribute
#------------------------------------------------------------------
    def read_Limit0EnableM5(self, attr):
        #    Add your own code here
        
        attr_Limit0EnableM5_read = self.limitSwitch0Enabled[5]
        attr.set_value(attr_Limit0EnableM5_read)


#------------------------------------------------------------------
#    Write Limit0EnableM5 attribute
#------------------------------------------------------------------
    def write_Limit0EnableM5(self, attr):
        print "In ", self.get_name(), "::write_Limit0EnableM5()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 0, 5)


#---- Limit0EnableM5 attribute State Machine -----------------
    def is_Limit0EnableM5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1EnableM0 attribute
#------------------------------------------------------------------
    def read_Limit1EnableM0(self, attr):
        #    Add your own code here
        
        attr_Limit1EnableM0_read = self.limitSwitch1Enabled[0]
        attr.set_value(attr_Limit1EnableM0_read)


#------------------------------------------------------------------
#    Write Limit1EnableM0 attribute
#------------------------------------------------------------------
    def write_Limit1EnableM0(self, attr):
        print "In ", self.get_name(), "::write_Limit1EnableM0()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 1, 0)


#---- Limit1EnableM0 attribute State Machine -----------------
    def is_Limit1EnableM0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1EnableM1 attribute
#------------------------------------------------------------------
    def read_Limit1EnableM1(self, attr):
        #    Add your own code here
        
        attr_Limit1EnableM1_read = self.limitSwitch1Enabled[1]
        attr.set_value(attr_Limit1EnableM1_read)


#------------------------------------------------------------------
#    Write Limit1EnableM1 attribute
#------------------------------------------------------------------
    def write_Limit1EnableM1(self, attr):
        print "In ", self.get_name(), "::write_Limit1EnableM1()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 1, 1)


#---- Limit1EnableM1 attribute State Machine -----------------
    def is_Limit1EnableM1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1EnableM2 attribute
#------------------------------------------------------------------
    def read_Limit1EnableM2(self, attr):
        #    Add your own code here
        
        attr_Limit1EnableM2_read = self.limitSwitch1Enabled[2]
        attr.set_value(attr_Limit1EnableM2_read)


#------------------------------------------------------------------
#    Write Limit1EnableM2 attribute
#------------------------------------------------------------------
    def write_Limit1EnableM2(self, attr):
        print "In ", self.get_name(), "::write_Limit1EnableM2()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 1, 2)


#---- Limit1EnableM2 attribute State Machine -----------------
    def is_Limit1EnableM2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1EnableM3 attribute
#------------------------------------------------------------------
    def read_Limit1EnableM3(self, attr):
        #    Add your own code here
        
        attr_Limit1EnableM3_read = self.limitSwitch1Enabled[3]
        attr.set_value(attr_Limit1EnableM3_read)


#------------------------------------------------------------------
#    Write Limit1EnableM3 attribute
#------------------------------------------------------------------
    def write_Limit1EnableM3(self, attr):
        print "In ", self.get_name(), "::write_Limit1EnableM3()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 1, 3)


#---- Limit1EnableM3 attribute State Machine -----------------
    def is_Limit1EnableM3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1EnableM4 attribute
#------------------------------------------------------------------
    def read_Limit1EnableM4(self, attr):
        #    Add your own code here
        
        attr_Limit1EnableM4_read = self.limitSwitch1Enabled[4]
        attr.set_value(attr_Limit1EnableM4_read)


#------------------------------------------------------------------
#    Write Limit1EnableM4 attribute
#------------------------------------------------------------------
    def write_Limit1EnableM4(self, attr):
        print "In ", self.get_name(), "::write_Limit1EnableM4()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 1, 4)


#---- Limit1EnableM4 attribute State Machine -----------------
    def is_Limit1EnableM4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read Limit1EnableM5 attribute
#------------------------------------------------------------------
    def read_Limit1EnableM5(self, attr):
        #    Add your own code here
        
        attr_Limit1EnableM5_read = self.limitSwitch1Enabled[5]
        attr.set_value(attr_Limit1EnableM5_read)


#------------------------------------------------------------------
#    Write Limit1EnableM5 attribute
#------------------------------------------------------------------
    def write_Limit1EnableM5(self, attr):
        print "In ", self.get_name(), "::write_Limit1EnableM5()"
        data = attr.get_write_value()        
        print "Attribute value = ", data
        #    Add your own code here
        self.setLimitSwitchEnable(data, 1, 5)


#---- Limit1EnableM5 attribute State Machine -----------------
    def is_Limit1EnableM5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read LoadM0 attribute
#------------------------------------------------------------------
    def read_LoadM0(self, attr):
        #    Add your own code here
        
        attr_LoadM0_read = self.loadValues[0]
        attr.set_value(attr_LoadM0_read)


#---- LoadM0 attribute State Machine -----------------
    def is_LoadM0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read LoadM1 attribute
#------------------------------------------------------------------
    def read_LoadM1(self, attr):
        #    Add your own code here
        
        attr_LoadM1_read = self.loadValues[1]
        attr.set_value(attr_LoadM1_read)


#---- LoadM1 attribute State Machine -----------------
    def is_LoadM1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read LoadM2 attribute
#------------------------------------------------------------------
    def read_LoadM2(self, attr):
        #    Add your own code here
        
        attr_LoadM2_read = self.loadValues[2]
        attr.set_value(attr_LoadM2_read)


#---- LoadM2 attribute State Machine -----------------
    def is_LoadM2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read LoadM3 attribute
#------------------------------------------------------------------
    def read_LoadM3(self, attr):
        #    Add your own code here
        
        attr_LoadM3_read = self.loadValues[3]
        attr.set_value(attr_LoadM3_read)


#---- LoadM3 attribute State Machine -----------------
    def is_LoadM3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read LoadM4 attribute
#------------------------------------------------------------------
    def read_LoadM4(self, attr):
        #    Add your own code here
        
        attr_LoadM4_read = self.loadValues[4]
        attr.set_value(attr_LoadM4_read)


#---- LoadM4 attribute State Machine -----------------
    def is_LoadM4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read LoadM5 attribute
#------------------------------------------------------------------
    def read_LoadM5(self, attr):
        #    Add your own code here
        
        attr_LoadM5_read = self.loadValues[5]
        attr.set_value(attr_LoadM5_read)


#---- LoadM5 attribute State Machine -----------------
    def is_LoadM5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MotorStatusM0 attribute
#------------------------------------------------------------------
    def read_MotorStatusM0(self, attr):
        #    Add your own code here
        
        attr_MotorStatusM0_read = self.motorStatus[0]
        attr.set_value(attr_MotorStatusM0_read)


#---- LoadM5 attribute State Machine -----------------
    def is_MotorStatusM0_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MotorStatusM1 attribute
#------------------------------------------------------------------
    def read_MotorStatusM1(self, attr):
        #    Add your own code here
        
        attr_MotorStatusM1_read = self.motorStatus[1]
        attr.set_value(attr_MotorStatusM1_read)


#---- LoadM5 attribute State Machine -----------------
    def is_MotorStatusM1_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    Read MotorStatusM2 attribute
#------------------------------------------------------------------
    def read_MotorStatusM2(self, attr):
        #    Add your own code here
        
        attr_MotorStatusM2_read = self.motorStatus[2]
        attr.set_value(attr_MotorStatusM2_read)


#---- LoadM5 attribute State Machine -----------------
    def is_MotorStatusM2_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MotorStatusM3 attribute
#------------------------------------------------------------------
    def read_MotorStatusM3(self, attr):
        #    Add your own code here
        
        attr_MotorStatusM3_read = self.motorStatus[3]
        attr.set_value(attr_MotorStatusM3_read)


#---- LoadM5 attribute State Machine -----------------
    def is_MotorStatusM3_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MotorStatusM4 attribute
#------------------------------------------------------------------
    def read_MotorStatusM4(self, attr):
        #    Add your own code here
        
        attr_MotorStatusM4_read = self.motorStatus[4]
        attr.set_value(attr_MotorStatusM4_read)


#---- LoadM5 attribute State Machine -----------------
    def is_MotorStatusM4_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Read MotorStatusM5 attribute
#------------------------------------------------------------------
    def read_MotorStatusM5(self, attr):
        #    Add your own code here
        
        attr_MotorStatusM5_read = self.motorStatus[5]
        attr.set_value(attr_MotorStatusM5_read)


#---- LoadM5 attribute State Machine -----------------
    def is_MotorStatusM5_allowed(self, req_type):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True





#==================================================================
#
#    Trinamic_TMCM6110_DS command methods
#
#==================================================================

#------------------------------------------------------------------
#    Off command:
#
#    Description: Power off, disconnect
#                
#------------------------------------------------------------------
    def Off(self):
        print "In ", self.get_name(), "::Off()"
        #    Add your own code here
        try:
            self.stopHardwareThread()
            self.TC.close()
            self.set_state(PyTango.DevState.OFF)
            self.set_status('Disconnected from motor controller.')
        except Exception, e:
            self.error_stream('Could not disconnect from motor controller')
            self.set_state(PyTango.DevState.FAULT)
            self.set_status('Failed to disconnect from motor controller.')
            PyTango.Except.throw_exception('Motor controller disconnection fail',
                                        str(e), 'Off', PyTango.ErrSeverity.ERR)


#------------------------------------------------------------------
#    On command:
#
#    Description: Connect to controller
#                
#------------------------------------------------------------------
    def On(self):
        print "In ", self.get_name(), "::On()"
        #    Add your own code here


#------------------------------------------------------------------
#    Stop command:
#
#    Description: Stop motion on all motors
#                
#------------------------------------------------------------------
    def Stop(self):
        print "In ", self.get_name(), "::Stop()"
        #    Add your own code here        
        self.commandQueue.put(TrinamicCommand('stop'))


#---- Stop command State Machine -----------------
    def is_Stop_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    SetZeroPosition command:
#
#    Description: Set current position as zero.
#                
#    argin:  DevShort    Motor axis to zero
#------------------------------------------------------------------
    def SetZeroPosition(self, argin):
        #    Add your own code here
        self.info_stream(''.join(('SetZeroPosition, motor ', str(argin))))
        self.commandQueue.put(TrinamicCommand('setMotorZeroPosition', motor=argin))


#---- SetZeroPosition command State Machine -----------------
    def is_SetZeroPosition_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#------------------------------------------------------------------
#    Home command:
#
#    Description: Home motor to left reference switch
#                
#    argin:  DevShort    Motor axis home
#------------------------------------------------------------------
    def Home(self, argin):
        #    Add your own code here
        self.info_stream(''.join(('Home, motor ', str(argin))))
        self.commandQueue.put(TrinamicCommand('homeMotor', motor=argin))


#---- SetZeroPosition command State Machine -----------------
    def is_Home_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True



#------------------------------------------------------------------
#    MotorCommand command:
#
#    Description: 
#    argin:  DevString    The command to be sent to the Trinamic_control \nclass as a string, e.g. getPulseDivisor(0).\nSee trinamic_control.py for possible commands.
#------------------------------------------------------------------
    def MotorCommand(self, argin):
        print "In ", self.get_name(), "::MotorCommand()"
        #    Add your own code here
        result = None
        s = ''.join(('self.TC.', argin))        
        try:
            self.hardwareLock.acquire()
            result = eval(s)
            print ''.join((argin, ' returned: '))
            print str(result)            
        except Exception, e:
            print str(e)
        finally:
            self.hardwareLock.release()


#---- MotorCommand command State Machine -----------------
    def is_MotorCommand_allowed(self):
        if self.get_state() in [PyTango.DevState.OFF]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#==================================================================
#
#    Trinamic_TMCM6110_DSClass class definition
#
#==================================================================
class Trinamic_TMCM6110_DSClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'Port':
            [PyTango.DevUShort,
            "COM port of the serial connection to the motor controller",
            [ 1 ] ],
        'HardwarePollingPeriod':
            [PyTango.DevDouble,
            "Time in ms between calls to the motor controller for position, speed, etc.",
            [ 500 ] ],
        }


    #    Command definitions
    cmd_list = {
        'Off':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'On':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'Stop':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'SetZeroPosition':
            [[PyTango.DevShort, "Motor axis to zero"],
            [PyTango.DevVoid, ""]],
        'Home':
            [[PyTango.DevShort, "Motor axis to home"],
            [PyTango.DevVoid, ""]],
        'MotorCommand':
            [[PyTango.DevString, "The command to be sent to the Trinamic_control6110 \nclass as a string, e.g. getPulseDivisor(0).\nSee trinamic_control6110.py for possible commands."],
            [PyTango.DevVoid, ""]],
        }


    #    Attribute definitions
    attr_list = {
        'PositionM0':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Position M0",
                'unit':"Step",
                'description':"Position of motor 0",
            } ],
        'PositionM1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'PositionM2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'PositionM3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'PositionM4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'PositionM5':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'SpeedM0':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'SpeedM1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'SpeedM2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'SpeedM3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'SpeedM4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'SpeedM5':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit0M0':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit1M0':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit0M1':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit1M1':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit0M2':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit1M2':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit0M3':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit1M3':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit0M4':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit1M4':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit0M5':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Limit1M5':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'MaxCurrentM0':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"A",
                'display unit':"A",
                'description':"Maximum current (peak) in A sent to the motor. The motor\nrating is usually in RMS, so this value x sqrt(2) should\nbe used here.",
                'Memorized':"true_without_hard_applied",
            } ],
        'MaxCurrentM1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"A",
                'display unit':"A",
                'description':"Maximum current (peak) in A sent to the motor. The motor\nrating is usually in RMS, so this value x sqrt(2) should\nbe used here.",
                'Memorized':"true_without_hard_applied",
            } ],
        'MaxCurrentM2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"A",
                'display unit':"A",
                'description':"Maximum current (peak) in A sent to the motor. The motor\nrating is usually in RMS, so this value x sqrt(2) should\nbe used here.",
                'Memorized':"true_without_hard_applied",
            } ],
        'MaxCurrentM3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"A",
                'display unit':"A",
                'description':"Maximum current (peak) in A sent to the motor. The motor\nrating is usually in RMS, so this value x sqrt(2) should\nbe used here.",
                'Memorized':"true_without_hard_applied",
            } ],
        'MaxCurrentM4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"A",
                'display unit':"A",
                'description':"Maximum current (peak) in A sent to the motor. The motor\nrating is usually in RMS, so this value x sqrt(2) should\nbe used here.",
                'Memorized':"true_without_hard_applied",
            } ],
        'MaxCurrentM5':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"A",
                'display unit':"A",
                'description':"Maximum current (peak) in A sent to the motor. The motor\nrating is usually in RMS, so this value x sqrt(2) should\nbe used here.",
                'Memorized':"true_without_hard_applied",
            } ],
        'AccelerationM0':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"steps/s^2",
                'Memorized':"true_without_hard_applied",
            } ],
        'AccelerationM1':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"steps/s^2",
                'Memorized':"true_without_hard_applied",
            } ],
        'AccelerationM2':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"steps/s^2",
                'Memorized':"true_without_hard_applied",
            } ],
        'AccelerationM3':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"steps/s^2",
                'Memorized':"true_without_hard_applied",
            } ],
        'AccelerationM4':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"steps/s^2",
                'Memorized':"true_without_hard_applied",
            } ],
        'AccelerationM5':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit':"steps/s^2",
                'Memorized':"true_without_hard_applied",
            } ],
        'MicrostepResolutionM0':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value':64,
                'min value':1,
                'Memorized':"true_without_hard_applied",
            } ],
        'MicrostepResolutionM1':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value':64,
                'min value':1,
                'Memorized':"true_without_hard_applied",
            } ],
        'MicrostepResolutionM2':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value':64,
                'min value':1,
                'Memorized':"true_without_hard_applied",
            } ],
        'MicrostepResolutionM3':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value':64,
                'min value':1,
                'Memorized':"true_without_hard_applied",
            } ],
        'MicrostepResolutionM4':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value':64,
                'min value':1,
                'Memorized':"true_without_hard_applied",
            } ],
        'MicrostepResolutionM5':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value':64,
                'min value':1,
                'Memorized':"true_without_hard_applied",
            } ],
        'LimitPolarity':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit0EnableM0':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit0EnableM1':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit0EnableM2':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit0EnableM3':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit0EnableM4':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit0EnableM5':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit1EnableM0':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit1EnableM1':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit1EnableM2':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit1EnableM3':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit1EnableM4':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'Limit1EnableM5':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied",
            } ],
        'LoadM0':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value':1023,
                'min value':0,
                'description':"Sensorless load measurement of the motor",
            } ],
        'LoadM1':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value':1023,
                'min value':0,
                'description':"Sensorless load measurement of the motor",
            } ],
        'LoadM2':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value':1023,
                'min value':0,
                'description':"Sensorless load measurement of the motor",
            } ],
        'LoadM3':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value':1023,
                'min value':0,
                'description':"Sensorless load measurement of the motor",
            } ],
        'LoadM4':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value':1023,
                'min value':0,
                'description':"Sensorless load measurement of the motor",
            } ],
        'LoadM5':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'max value':1023,
                'min value':0,
                'description':"Sensorless load measurement of the motor",
            } ],
        'MotorStatusM0':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Motor status as derived from the driver IC",
            } ],
        'MotorStatusM1':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Motor status as derived from the driver IC",
            } ],
        'MotorStatusM2':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Motor status as derived from the driver IC",
            } ],
        'MotorStatusM3':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Motor status as derived from the driver IC",
            } ],
        'MotorStatusM4':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Motor status as derived from the driver IC",
            } ],
        'MotorStatusM5':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'description':"Motor status as derived from the driver IC",
            } ],
              
        }


#------------------------------------------------------------------
#    Trinamic_TMCM6110_DSClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In Trinamic_TMCM6110_DSClass  constructor"

#==================================================================
#
#    Trinamic_TMCM6110_DS class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(Trinamic_TMCM6110_DSClass, Trinamic_TMCM6110_DS, 'Trinamic_TMCM6110_DS')
        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed, e:
        print '-------> Received a DevFailed exception:', e
    except Exception, e:
        print '-------> An unforeseen exception occured....', e
